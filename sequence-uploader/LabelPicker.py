#!/usr/bin/env python3
"""
LabelPicker.py - ÎùºÎ≤® CSV ÌååÏùºÏóêÏÑú Ïú†ÎãàÌÅ¨Ìïú Í∞íÏùÑ Ï∂îÏ∂úÌïòÏó¨ spec.json ÌòïÏãùÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏

ÏÇ¨Ïö©Î≤ï:
    python LabelPicker.py [--input INPUT_CSV] [--output OUTPUT_JSON] [--chapter CHAPTER_NAME]

ÏòàÏãú:
    python LabelPicker.py --input labels.csv --output spec_labels.json --chapter chapter_01
"""

import csv
import json
import argparse
import sys
from pathlib import Path


def extract_unique_labels(csv_file_path, label_column='ÌïúÍµ≠Ïñ¥'):
    """
    CSV ÌååÏùºÏóêÏÑú Ïú†ÎãàÌÅ¨Ìïú ÎùºÎ≤®ÏùÑ Ï∂îÏ∂úÌï©ÎãàÎã§.
    
    Args:
        csv_file_path (str): CSV ÌååÏùº Í≤ΩÎ°ú
        label_column (str): ÎùºÎ≤®Ïù¥ ÏûàÎäî Ïª¨ÎüºÎ™Ö (Í∏∞Î≥∏Í∞í: 'ÌïúÍµ≠Ïñ¥')
    
    Returns:
        list: Ï†ïÎ†¨Îêú Ïú†ÎãàÌÅ¨ ÎùºÎ≤® Î¶¨Ïä§Ìä∏
    """
    unique_labels = set()
    
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            csv_reader = csv.DictReader(file)
            
            # Ìó§Îçî ÌôïÏù∏
            if label_column not in csv_reader.fieldnames:
                available_columns = ', '.join(csv_reader.fieldnames)
                raise ValueError(f"Ïª¨Îüº '{label_column}'ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïª¨Îüº: {available_columns}")
            
            # Ïú†ÎãàÌÅ¨ ÎùºÎ≤® ÏàòÏßë
            for row in csv_reader:
                label = row[label_column].strip()
                if label:  # Îπà Î¨∏ÏûêÏó¥Ïù¥ ÏïÑÎãå Í≤ΩÏö∞Îßå Ï∂îÍ∞Ä
                    unique_labels.add(label)
                    
    except FileNotFoundError:
        raise FileNotFoundError(f"ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {csv_file_path}")
    except UnicodeDecodeError:
        # UTF-8Î°ú ÏùΩÍ∏∞ Ïã§Ìå®Ïãú Îã§Î•∏ Ïù∏ÏΩîÎî© ÏãúÎèÑ
        try:
            with open(csv_file_path, 'r', encoding='cp949') as file:
                csv_reader = csv.DictReader(file)
                for row in csv_reader:
                    label = row[label_column].strip()
                    if label:
                        unique_labels.add(label)
        except UnicodeDecodeError:
            raise UnicodeDecodeError("ÌååÏùº Ïù∏ÏΩîÎî©ÏùÑ ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. UTF-8 ÎòêÎäî CP949Î•º ÏãúÎèÑÌñàÏäµÎãàÎã§.")
    
    # ÏïåÌååÎ≤≥ ÏàúÏúºÎ°ú Ï†ïÎ†¨ÌïòÏó¨ Î∞òÌôò
    return sorted(list(unique_labels))


def create_label_dict(unique_labels, include_none=True):
    """
    Ïú†ÎãàÌÅ¨ ÎùºÎ≤® Î¶¨Ïä§Ìä∏Î•º ÎùºÎ≤® ÎîïÏÖîÎÑàÎ¶¨Î°ú Î≥ÄÌôòÌï©ÎãàÎã§.
    
    Args:
        unique_labels (list): Ïú†ÎãàÌÅ¨ ÎùºÎ≤® Î¶¨Ïä§Ìä∏
        include_none (bool): 'None' ÎùºÎ≤®ÏùÑ Ï∂îÍ∞ÄÌï†ÏßÄ Ïó¨Î∂Ä
    
    Returns:
        dict: ÎùºÎ≤®ÏùÑ ÌÇ§Î°ú, Ï†ïÏàòÎ•º Í∞íÏúºÎ°ú ÌïòÎäî ÎîïÏÖîÎÑàÎ¶¨
    """
    label_dict = {}
    
    # ÎùºÎ≤®ÏùÑ 0Î∂ÄÌÑ∞ ÏãúÏûëÌïòÎäî Ï†ïÏàòÏóê Îß§Ìïë
    for idx, label in enumerate(unique_labels):
        label_dict[label] = idx
    
    # None ÎùºÎ≤® Ï∂îÍ∞Ä (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    if include_none and "None" not in label_dict:
        label_dict["None"] = len(label_dict)
    
    return label_dict


def create_spec_json(label_dict, chapter_name="chapter_01"):
    """
    spec.json ÌòïÏãùÏùò ÎîïÏÖîÎÑàÎ¶¨Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
    
    Args:
        label_dict (dict): ÎùºÎ≤® ÎîïÏÖîÎÑàÎ¶¨
        chapter_name (str): Ï±ïÌÑ∞ Ïù¥Î¶Ñ
    
    Returns:
        dict: spec.json ÌòïÏãùÏùò ÎîïÏÖîÎÑàÎ¶¨
    """
    return {
        "chapter_name": chapter_name,
        "label_dict": label_dict
    }


def save_json(data, output_file_path):
    """
    Îç∞Ïù¥ÌÑ∞Î•º JSON ÌååÏùºÎ°ú Ï†ÄÏû•Ìï©ÎãàÎã§.
    
    Args:
        data (dict): Ï†ÄÏû•Ìï† Îç∞Ïù¥ÌÑ∞
        output_file_path (str): Ï∂úÎ†• ÌååÏùº Í≤ΩÎ°ú
    """
    try:
        with open(output_file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=2)
        print(f"‚úÖ JSON ÌååÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§: {output_file_path}")
    except Exception as e:
        raise Exception(f"JSON ÌååÏùº Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e}")


def main():
    parser = argparse.ArgumentParser(
        description="CSV ÌååÏùºÏóêÏÑú Ïú†ÎãàÌÅ¨Ìïú ÎùºÎ≤®ÏùÑ Ï∂îÏ∂úÌïòÏó¨ spec.json ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
ÏòàÏãú:
  python LabelPicker.py
  python LabelPicker.py --input labels.csv --output spec_labels.json
  python LabelPicker.py --input data/labels.csv --output specs/spec_new.json --chapter chapter_100
        """
    )
    
    parser.add_argument(
        '--input', '-i',
        default='labels.csv',
        help='ÏûÖÎ†• CSV ÌååÏùº Í≤ΩÎ°ú (Í∏∞Î≥∏Í∞í: labels.csv)'
    )
    
    parser.add_argument(
        '--output', '-o',
        default='spec_labels.json',
        help='Ï∂úÎ†• JSON ÌååÏùº Í≤ΩÎ°ú (Í∏∞Î≥∏Í∞í: spec_labels.json)'
    )
    
    parser.add_argument(
        '--chapter', '-c',
        default='chapter_01',
        help='Ï±ïÌÑ∞ Ïù¥Î¶Ñ (Í∏∞Î≥∏Í∞í: chapter_01)'
    )
    
    parser.add_argument(
        '--no-none',
        action='store_true',
        help='None ÎùºÎ≤®ÏùÑ Ìè¨Ìï®ÌïòÏßÄ ÏïäÏùå'
    )
    
    parser.add_argument(
        '--column',
        default='ÌïúÍµ≠Ïñ¥',
        help='ÎùºÎ≤®ÏùÑ Ï∂îÏ∂úÌï† Ïª¨ÎüºÎ™Ö (Í∏∞Î≥∏Í∞í: ÌïúÍµ≠Ïñ¥)'
    )
    
    args = parser.parse_args()
    
    try:
        # 1. ÏûÖÎ†• ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏
        if not Path(args.input).exists():
            print(f"‚ùå Ïò§Î•ò: ÏûÖÎ†• ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {args.input}")
            sys.exit(1)
        
        print(f"üìÇ CSV ÌååÏùº ÏùΩÎäî Ï§ë: {args.input}")
        
        # 2. Ïú†ÎãàÌÅ¨ ÎùºÎ≤® Ï∂îÏ∂ú
        unique_labels = extract_unique_labels(args.input, args.column)
        print(f"üìä Ï¥ù {len(unique_labels)}Í∞úÏùò Ïú†ÎãàÌÅ¨Ìïú ÎùºÎ≤®ÏùÑ Î∞úÍ≤¨ÌñàÏäµÎãàÎã§.")
        
        # 3. ÎùºÎ≤® ÎîïÏÖîÎÑàÎ¶¨ ÏÉùÏÑ±
        label_dict = create_label_dict(unique_labels, include_none=not args.no_none)
        print(f"üè∑Ô∏è  ÎùºÎ≤® ÎîïÏÖîÎÑàÎ¶¨ ÏÉùÏÑ± ÏôÑÎ£å (Ï¥ù {len(label_dict)}Í∞ú Ìï≠Î™©)")
        
        # 4. spec.json ÌòïÏãù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        spec_data = create_spec_json(label_dict, args.chapter)
        
        # 5. JSON ÌååÏùºÎ°ú Ï†ÄÏû•
        save_json(spec_data, args.output)
        
        # 6. Í≤∞Í≥º ÏöîÏïΩ Ï∂úÎ†•
        print(f"\nüìã Ï≤òÎ¶¨ Í≤∞Í≥º ÏöîÏïΩ:")
        print(f"   ÏûÖÎ†• ÌååÏùº: {args.input}")
        print(f"   Ï∂úÎ†• ÌååÏùº: {args.output}")
        print(f"   Ï±ïÌÑ∞Î™Ö: {args.chapter}")
        print(f"   ÎùºÎ≤® Í∞úÏàò: {len(label_dict)}")
        print(f"\nüè∑Ô∏è  ÎùºÎ≤® Îß§Ìïë (Ï≤òÏùå 10Í∞ú):")
        for i, (label, idx) in enumerate(list(label_dict.items())[:10]):
            print(f"   {label}: {idx}")
        if len(label_dict) > 10:
            print(f"   ... Î∞è {len(label_dict) - 10}Í∞ú Îçî")
            
    except Exception as e:
        print(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
